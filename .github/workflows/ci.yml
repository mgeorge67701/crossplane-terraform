name: Crossplane Provider CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug event information
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref type: ${{ github.ref_type }}"
        echo "Tag: ${{ github.ref_name }}"
        echo "Event action: ${{ github.event.action }}"

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true  # Enable built-in caching
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
      env:
        GOPROXY: https://proxy.golang.org,direct
    
    - name: Run tests
      run: go test -v ./...
      env:
        CGO_ENABLED: 0
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=10m
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Generate CRDs
      run: make generate
    
    - name: Verify CRDs are up to date
      run: |
        if [ -n "$(git status --porcelain package/crds/)" ]; then
          echo "CRDs are not up to date. Please run 'make generate' and commit the changes."
          git status --porcelain package/crds/
          exit 1
        fi

  validate-examples:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Crossplane example manifests
      run: |
        # Check if example files are valid YAML
        find examples/ -name "*.yaml" -o -name "*.yml" | xargs -I {} sh -c 'echo "Validating {}" && cat {} | grep -q "apiVersion" || (echo "Invalid YAML: {}" && exit 1)'
        
        # Basic validation that examples contain required fields
        if [ -f examples/crossplane-provider/terraform-vpc.yaml ]; then
          grep -q "apiVersion: terraform.crossplane.io/v1alpha1" examples/crossplane-provider/terraform-vpc.yaml || (echo "Missing correct apiVersion" && exit 1)
          grep -q "kind: Terraform" examples/crossplane-provider/terraform-vpc.yaml || (echo "Missing Terraform kind" && exit 1)
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, validate-examples]
    strategy:
      matrix:
        include:
          # Linux (primary target for containers)
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          # Optional: macOS for local development
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Build Crossplane Provider
      run: |
        mkdir -p dist
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} make build
        
        # Copy binary to dist with platform-specific name
        BINARY_NAME="provider-crossplane-terraform_${{ matrix.goos }}_${{ matrix.goarch }}"
        cp bin/provider dist/$BINARY_NAME
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: provider-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/provider-crossplane-terraform_${{ matrix.goos }}_${{ matrix.goarch }}*

  package:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Install Upbound CLI
      run: |
        curl -sL https://cli.upbound.io | sh
        sudo mv up /usr/local/bin/
    
    - name: Build provider binary
      run: make build
    
    - name: Copy provider binary to package
      run: cp bin/provider package/
    
    - name: Build Crossplane package
      run: |
        # Generate version from git tag or commit
        VERSION=${GITHUB_REF_NAME:-$(git rev-parse --short HEAD)}
        echo "Building package version: $VERSION"
        
        # Build the package
        up xpkg build --package-root=package --output=provider-crossplane-terraform-${VERSION}.xpkg
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: crossplane-package
        path: provider-crossplane-terraform-*.xpkg

  release:
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Build all platforms
      run: |
        mkdir -p dist
        
        # Build for all platforms
        GOOS=linux GOARCH=amd64 make build
        cp bin/provider dist/provider-crossplane-terraform_linux_amd64
        
        GOOS=linux GOARCH=arm64 make build
        cp bin/provider dist/provider-crossplane-terraform_linux_arm64
        
        GOOS=darwin GOARCH=amd64 make build
        cp bin/provider dist/provider-crossplane-terraform_darwin_amd64
        
        GOOS=darwin GOARCH=arm64 make build
        cp bin/provider dist/provider-crossplane-terraform_darwin_arm64
    
    - name: Install Upbound CLI
      run: |
        curl -sL https://cli.upbound.io | sh
        sudo mv up /usr/local/bin/
    
    - name: Build Crossplane package
      run: |
        # Build provider binary for package
        make build
        cp bin/provider package/
        
        # Generate version from git tag
        VERSION=${GITHUB_REF_NAME#v}
        echo "Building package version: $VERSION"
        
        # Build the package
        up xpkg build --package-root=package --output=provider-crossplane-terraform-${VERSION}.xpkg
        
        # Copy to dist
        cp provider-crossplane-terraform-${VERSION}.xpkg dist/
    
    - name: Prepare release assets
      run: |
        cd dist
        
        # Create archives for each platform binary
        for file in provider-crossplane-terraform_*; do
          if [[ "$file" != *.xpkg ]]; then
            tar -czf "$file.tar.gz" "$file"
            rm "$file"
          fi
        done
        
        # Create SHA256 checksums
        sha256sum *.{tar.gz,xpkg} > provider-crossplane-terraform_SHA256SUMS
        
        ls -la
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.tar.gz
          dist/*.xpkg
          dist/provider-crossplane-terraform_SHA256SUMS
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-upbound:
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install Upbound CLI
      run: |
        curl -sL https://cli.upbound.io | sh
        sudo mv up /usr/local/bin/
    
    - name: Login to Upbound
      run: |
        echo "Logging in to Upbound..."
        up login --username="${{ secrets.UPBOUND_ACCESS_ID }}" --password="${{ secrets.UPBOUND_TOKEN }}"
        echo "Login successful"
        up profile current
      env:
        UPBOUND_ACCESS_ID: ${{ secrets.UPBOUND_ACCESS_ID }}
        UPBOUND_TOKEN: ${{ secrets.UPBOUND_TOKEN }}
    
    - name: Build and push Docker image to GitHub Container Registry
      run: |
        # Generate version from git tag
        VERSION=${GITHUB_REF_NAME#v}
        echo "Building Docker image version: $VERSION"
        
        # Login to GitHub Container Registry
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
        
        # Build and push the Docker image
        docker build -t ghcr.io/mgeorge67701/provider-crossplane-terraform:${VERSION} .
        docker tag ghcr.io/mgeorge67701/provider-crossplane-terraform:${VERSION} ghcr.io/mgeorge67701/provider-crossplane-terraform:latest
        docker push ghcr.io/mgeorge67701/provider-crossplane-terraform:${VERSION}
        docker push ghcr.io/mgeorge67701/provider-crossplane-terraform:latest
        
        echo "Docker image pushed: ghcr.io/mgeorge67701/provider-crossplane-terraform:${VERSION}"
    
    - name: Build Crossplane package
      run: |
        # Build provider binary
        make build
        cp bin/provider package/
        
        # Generate version from git tag
        VERSION=${GITHUB_REF_NAME#v}
        echo "Building package version: $VERSION"
        echo "Package will be built as: provider-crossplane-terraform-${VERSION}.xpkg"
        
        # Update the image reference in crossplane.yaml
        sed -i "s|image:.*|image: ghcr.io/mgeorge67701/provider-crossplane-terraform:${VERSION}|" package/crossplane.yaml
        
        # Build the package
        up xpkg build --package-root=package --output=provider-crossplane-terraform-${VERSION}.xpkg
        
        # Verify package was created
        ls -la provider-crossplane-terraform-${VERSION}.xpkg
        echo "Package size: $(du -h provider-crossplane-terraform-${VERSION}.xpkg)"
    
    - name: Login to Upbound
      run: |
        echo "Logging in to Upbound..."
        up login --username="${{ secrets.UPBOUND_ACCESS_ID }}" --password="${{ secrets.UPBOUND_TOKEN }}"
        echo "Login successful"
        up profile current
      env:
        UPBOUND_ACCESS_ID: ${{ secrets.UPBOUND_ACCESS_ID }}
        UPBOUND_TOKEN: ${{ secrets.UPBOUND_TOKEN }}
    
    - name: Verify package and repository
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        echo "Verifying package file exists..."
        ls -la provider-crossplane-terraform-${VERSION}.xpkg
        
        echo "Checking repository access..."
        up repository list | grep provider-crossplane-terraform || echo "Repository not found, will be created automatically"
        
        echo "Current user context:"
        up profile current
        
        echo "Ready to push package: xpkg.upbound.io/mgeorge67701/provider-crossplane-terraform:${VERSION}"
    
    - name: Push to Upbound Marketplace
      run: |
        # Get the release tag version
        VERSION=${GITHUB_REF_NAME#v}  # Remove 'v' prefix if present
        echo "Pushing package version: ${VERSION}"
        echo "Full ref name: ${GITHUB_REF_NAME}"
        
        # Push the package to Upbound
        echo "Pushing package: xpkg.upbound.io/mgeorge67701/provider-crossplane-terraform:${VERSION}"
        up xpkg push xpkg.upbound.io/mgeorge67701/provider-crossplane-terraform:${VERSION} -f provider-crossplane-terraform-${VERSION}.xpkg
        echo "Successfully pushed version ${VERSION}"
        
        # Also push as 'latest' if this is not a pre-release
        if [[ ! "${VERSION}" =~ (alpha|beta|rc) ]]; then
          echo "Pushing as latest..."
          up xpkg push xpkg.upbound.io/mgeorge67701/provider-crossplane-terraform:latest -f provider-crossplane-terraform-${VERSION}.xpkg
          echo "Successfully pushed as latest"
        fi
    
    - name: Update repository publish policy
      run: |
        # Ensure repository is published to marketplace
        echo "Updating repository publish policy..."
        up repository update provider-crossplane-terraform --publish --private=false || echo "Repository update failed, continuing..."
        echo "Repository update completed"
