apiVersion: terraform.crossplane.io/v1alpha1
kind: Terraform
metadata:
  name: vpc-infrastructure
  labels:
    app: vpc-infrastructure
spec:
  forProvider:
    configuration: |
      terraform {
        required_providers {
          aws = {
            source  = "hashicorp/aws"
            version = "~> 5.0"
          }
        }
      }
      
      variable "vpc_cidr" {
        description = "CIDR block for VPC"
        type        = string
        default     = "10.0.0.0/16"
      }
      
      variable "availability_zones" {
        description = "Availability zones"
        type        = list(string)
        default     = ["us-west-2a", "us-west-2b"]
      }
      
      variable "environment" {
        description = "Environment name"
        type        = string
        default     = "dev"
      }
      
      # VPC
      resource "aws_vpc" "main" {
        cidr_block           = var.vpc_cidr
        enable_dns_hostnames = true
        enable_dns_support   = true
        
        tags = {
          Name        = "${var.environment}-vpc"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
      }
      
      # Internet Gateway
      resource "aws_internet_gateway" "main" {
        vpc_id = aws_vpc.main.id
        
        tags = {
          Name        = "${var.environment}-igw"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
      }
      
      # Public Subnets
      resource "aws_subnet" "public" {
        count             = length(var.availability_zones)
        vpc_id            = aws_vpc.main.id
        cidr_block        = "10.0.${count.index + 1}.0/24"
        availability_zone = var.availability_zones[count.index]
        
        map_public_ip_on_launch = true
        
        tags = {
          Name        = "${var.environment}-public-subnet-${count.index + 1}"
          Environment = var.environment
          Type        = "public"
          ManagedBy   = "crossplane"
        }
      }
      
      # Private Subnets
      resource "aws_subnet" "private" {
        count             = length(var.availability_zones)
        vpc_id            = aws_vpc.main.id
        cidr_block        = "10.0.${count.index + 10}.0/24"
        availability_zone = var.availability_zones[count.index]
        
        tags = {
          Name        = "${var.environment}-private-subnet-${count.index + 1}"
          Environment = var.environment
          Type        = "private"
          ManagedBy   = "crossplane"
        }
      }
      
      # Route Table for Public Subnets
      resource "aws_route_table" "public" {
        vpc_id = aws_vpc.main.id
        
        route {
          cidr_block = "0.0.0.0/0"
          gateway_id = aws_internet_gateway.main.id
        }
        
        tags = {
          Name        = "${var.environment}-public-rt"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
      }
      
      # Route Table Associations for Public Subnets
      resource "aws_route_table_association" "public" {
        count          = length(aws_subnet.public)
        subnet_id      = aws_subnet.public[count.index].id
        route_table_id = aws_route_table.public.id
      }
      
      # NAT Gateways
      resource "aws_eip" "nat" {
        count  = length(var.availability_zones)
        domain = "vpc"
        
        tags = {
          Name        = "${var.environment}-nat-eip-${count.index + 1}"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
        
        depends_on = [aws_internet_gateway.main]
      }
      
      resource "aws_nat_gateway" "main" {
        count         = length(var.availability_zones)
        allocation_id = aws_eip.nat[count.index].id
        subnet_id     = aws_subnet.public[count.index].id
        
        tags = {
          Name        = "${var.environment}-nat-${count.index + 1}"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
        
        depends_on = [aws_internet_gateway.main]
      }
      
      # Route Tables for Private Subnets
      resource "aws_route_table" "private" {
        count  = length(var.availability_zones)
        vpc_id = aws_vpc.main.id
        
        route {
          cidr_block     = "0.0.0.0/0"
          nat_gateway_id = aws_nat_gateway.main[count.index].id
        }
        
        tags = {
          Name        = "${var.environment}-private-rt-${count.index + 1}"
          Environment = var.environment
          ManagedBy   = "crossplane"
        }
      }
      
      # Route Table Associations for Private Subnets
      resource "aws_route_table_association" "private" {
        count          = length(aws_subnet.private)
        subnet_id      = aws_subnet.private[count.index].id
        route_table_id = aws_route_table.private[count.index].id
      }
      
      # Outputs
      output "vpc_id" {
        description = "ID of the VPC"
        value       = aws_vpc.main.id
      }
      
      output "vpc_cidr_block" {
        description = "CIDR block of the VPC"
        value       = aws_vpc.main.cidr_block
      }
      
      output "public_subnet_ids" {
        description = "IDs of the public subnets"
        value       = aws_subnet.public[*].id
      }
      
      output "private_subnet_ids" {
        description = "IDs of the private subnets"
        value       = aws_subnet.private[*].id
      }
      
      output "internet_gateway_id" {
        description = "ID of the Internet Gateway"
        value       = aws_internet_gateway.main.id
      }
      
      output "nat_gateway_ids" {
        description = "IDs of the NAT Gateways"
        value       = aws_nat_gateway.main[*].id
      }
    variables:
      vpc_cidr: "10.0.0.0/16"
      availability_zones: ["us-west-2a", "us-west-2b"]
      environment: "production"
    backend:
      type: "s3"
      configuration:
        bucket: "my-terraform-state"
        key: "vpc-infrastructure/terraform.tfstate"
        region: "us-west-2"
        encrypt: "true"
  providerConfigRef:
    name: default
  deletionPolicy: Delete
  managementPolicies: ["*"]
