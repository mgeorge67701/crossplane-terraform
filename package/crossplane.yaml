apiVersion: meta.pkg.crossplane.io/v1alpha1
kind: Provider
metadata:
  name: provider-crossplane-terraform
  annotations:
    meta.crossplane.io/maintainer: "Mohan George <mgeorge67701@gmail.com>"
    meta.crossplane.io/source: "https://github.com/mgeorge67701/crossplane-terraform"
    meta.crossplane.io/license: "Apache-2.0"
    meta.crossplane.io/description: "A Crossplane provider for managing Terraform resources with native Kubernetes APIs - by Mohan George"
    meta.crossplane.io/iconURI: "https://raw.githubusercontent.com/mgeorge67701/crossplane-terraform/main/logo.svg"
    meta.crossplane.io/keywords: "terraform,infrastructure,crossplane,kubernetes,gitops"
    meta.crossplane.io/category: "Infrastructure"
    meta.crossplane.io/readme: |
      # Crossplane Terraform Provider
      
      ![Logo](https://raw.githubusercontent.com/mgeorge67701/crossplane-terraform/main/logo.svg)
      
      A modern, secure Crossplane provider that enables you to manage Terraform resources using native Kubernetes APIs.
      
      ## üöÄ Features
      
      - **Native Kubernetes API**: Manage Terraform resources as Kubernetes objects
      - **Terraform 1.12.2**: Latest stable version with security patches
      - **Multi-Architecture**: Support for amd64 and arm64 platforms
      - **Secure by Default**: No hardcoded secrets, secure file permissions
      - **Dynamic Backends**: Support for all Terraform backends (S3, GCS, Azure, etc.)
      - **GitOps Ready**: Declarative configuration management
      - **Workspace Management**: Full support for Terraform workspaces
      
      ## üì¶ Managed Resources
      
      - **Terraform**: Manage complete Terraform configurations as Kubernetes resources
      - **Workspace**: Manage Terraform workspaces with state isolation
      
      ## üöÄ Quick Install
      
      ```bash
      kubectl crossplane install provider xpkg.upbound.io/mgeorge67701/provider-crossplane-terraform:v3.2.0
      ```
      
      ## üí° Example Usage
      
      ```yaml
      apiVersion: terraform.crossplane.io/v1alpha1
      kind: Terraform
      metadata:
        name: my-s3-bucket
      spec:
        forProvider:
          configuration: |
            terraform {
              required_providers {
                aws = {
                  source = "hashicorp/aws"
                  version = "~> 5.0"
                }
              }
            }
            
            resource "aws_s3_bucket" "example" {
              bucket = var.bucket_name
            }
          variables:
            bucket_name: "my-crossplane-bucket"
          backend:
            type: "s3"
            configuration:
              bucket: "my-terraform-state"
              key: "terraform.tfstate"
              region: "us-west-2"
        providerConfigRef:
          name: default
      ```
      
      ## üîß Configuration
      
      Create a ProviderConfig:
      
      ```yaml
      apiVersion: terraform.crossplane.io/v1alpha1
      kind: ProviderConfig
      metadata:
        name: default
      spec:
        credentials:
          source: Secret
          secretRef:
            namespace: crossplane-system
            name: terraform-creds
            key: credentials
      ```
      
      ## üìö Documentation
      
      For complete documentation, examples, and CI/CD setup, visit:
      [GitHub Repository](https://github.com/mgeorge67701/crossplane-terraform)
      
      ---
      
      **Built with ‚ù§Ô∏è for the Crossplane community**
spec:
  controller:
    image: ghcr.io/mgeorge67701/provider-crossplane-terraform:latest
